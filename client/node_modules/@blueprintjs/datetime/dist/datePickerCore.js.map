{"version":3,"sources":["../src/datePickerCore.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;AA+CU,QAAA,iBAAiB,GAAG,UAAU,CAAC;AAC/B,QAAA,sBAAsB,GAAG,eAAe,CAAC;AACzC,QAAA,gBAAgB,GAAG,SAAS,CAAC;AAC7B,QAAA,iBAAiB,GAAG,UAAU,CAAC;AAC/B,QAAA,uBAAuB,GAAG,gBAAgB,CAAC;AACxD,sFAAsF;AACzE,QAAA,oBAAoB,GAAG;IAChC,yBAAiB;IACjB,8BAAsB;IACtB,wBAAgB;IAChB,yBAAiB;IACjB,+BAAuB;CAC1B,CAAC;AAEF;IACI,IAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACrC,IAAI,CAAC,QAAQ,CAAC,iBAAe,EAAE,EAAE,CAAC,CAAC;IACnC,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC;AALD,8CAKC;AAED;IACI,IAAM,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IACxB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,CAAC;IAC1C,IAAI,CAAC,QAAQ,CAAC,eAAc,EAAE,CAAC,CAAC,CAAC;IACjC,MAAM,CAAC,IAAI,CAAC;AAChB,CAAC;AALD,8CAKC;AAED,0BAAiC,aAAmC,EAAE,aAAmC;IACrG,IAAI,SAAS,GAAG,aAAa,CAAC;IAC9B,EAAE,CAAC,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;QACxB,SAAS,GAAG,EAAE,CAAC;QACf,GAAG,CAAC,CAAc,UAA0B,EAA1B,KAAA,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAA1B,cAA0B,EAA1B,IAA0B;YAAvC,IAAM,GAAG,SAAA;YACV,EAAE,CAAC,CAAC,4BAAoB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC3C,SAAS,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;YACxC,CAAC;SACJ;QACD,GAAG,CAAC,CAAc,UAA0B,EAA1B,KAAA,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,EAA1B,cAA0B,EAA1B,IAA0B;YAAvC,IAAM,GAAG,SAAA;YACV,SAAS,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;SACvC;IACL,CAAC;IACD,MAAM,CAAC,SAAS,CAAC;AACrB,CAAC;AAdD,4CAcC","file":"datePickerCore.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { LocaleUtils } from \"react-day-picker\";\nimport { Months } from \"./common/months\";\n\n// DatePicker supports a simpler set of modifiers (for now).\n// also we need an interface for the dictionary without `today` and `outside` injected by r-d-p.\nexport interface IDatePickerModifiers {\n    [name: string]: (date: Date) => boolean;\n}\n\nexport interface IDatePickerBaseProps {\n    /**\n     * The initial month the calendar displays.\n     */\n    initialMonth?: Date;\n\n    /**\n     * The locale that gets passed to the functions in `localeUtils`.\n     */\n    locale?: string;\n\n    /**\n     * Collection of functions that provide internationalization support.\n     */\n    localeUtils?: LocaleUtils;\n\n    /**\n     * The latest date the user can select.\n     * @default Dec. 31st of this year.\n     */\n    maxDate?: Date;\n\n    /**\n     * The earliest date the user can select.\n     * @default Jan. 1st, 20 years in the past.\n     */\n    minDate?: Date;\n\n    /**\n     * Collection of functions that determine which modifier classes get applied to which days.\n     * Each function should accept a `Date` and return a boolean.\n     * See the [**react-day-picker** documentation](http://react-day-picker.js.org/Modifiers.html) to learn more.\n     */\n    modifiers?: IDatePickerModifiers;\n}\n\nexport const DISABLED_MODIFIER = \"disabled\";\nexport const HOVERED_RANGE_MODIFIER = \"hovered-range\";\nexport const OUTSIDE_MODIFIER = \"outside\";\nexport const SELECTED_MODIFIER = \"selected\";\nexport const SELECTED_RANGE_MODIFIER = \"selected-range\";\n// modifiers the user can't set because they are used by Blueprint or react-day-picker\nexport const DISALLOWED_MODIFIERS = [\n    DISABLED_MODIFIER,\n    HOVERED_RANGE_MODIFIER,\n    OUTSIDE_MODIFIER,\n    SELECTED_MODIFIER,\n    SELECTED_RANGE_MODIFIER,\n];\n\nexport function getDefaultMaxDate() {\n    const date = new Date();\n    date.setFullYear(date.getFullYear());\n    date.setMonth(Months.DECEMBER, 31);\n    return date;\n}\n\nexport function getDefaultMinDate() {\n    const date = new Date();\n    date.setFullYear(date.getFullYear() - 20);\n    date.setMonth(Months.JANUARY, 1);\n    return date;\n}\n\nexport function combineModifiers(baseModifiers: IDatePickerModifiers, userModifiers: IDatePickerModifiers) {\n    let modifiers = baseModifiers;\n    if (userModifiers != null) {\n        modifiers = {};\n        for (const key of Object.keys(userModifiers)) {\n            if (DISALLOWED_MODIFIERS.indexOf(key) === -1) {\n                modifiers[key] = userModifiers[key];\n            }\n        }\n        for (const key of Object.keys(baseModifiers)) {\n            modifiers[key] = baseModifiers[key];\n        }\n    }\n    return modifiers;\n}\n"]}