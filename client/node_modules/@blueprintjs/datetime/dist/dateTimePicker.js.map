{"version":3,"sources":["../src/dateTimePicker.tsx"],"names":[],"mappings":"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","file":"dateTimePicker.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\n\nimport { AbstractComponent, IProps, Utils } from \"@blueprintjs/core\";\n\nimport * as Classes from \"./common/classes\";\nimport * as DateUtils from \"./common/dateUtils\";\nimport { DatePicker, IDatePickerProps } from \"./datePicker\";\nimport { ITimePickerProps, TimePicker } from \"./timePicker\";\n\nexport interface IDateTimePickerProps extends IProps {\n    /**\n     * The initial date and time value that will be set.\n     * This will be ignored if `value` is set.\n     * @default Date.now()\n     */\n    defaultValue?: Date;\n\n    /**\n     * Any props to be passed on to the `DatePicker` other than the `value` and `onChange` props as they come directly\n     * from the `DateTimePicker` props.\n     */\n    datePickerProps?: IDatePickerProps;\n\n    /**\n     * Callback invoked when the user changes the date or time.\n     */\n    onChange?: (selectedDate: Date, isUserChange: boolean) => void;\n\n    /**\n     * Any props to be passed on to the `TimePicker` other than the `value` and `onChange` props as they come directly\n     * from the `DateTimePicker` props.\n     */\n    timePickerProps?: ITimePickerProps;\n\n    /**\n     * The currently set date and time. If this prop is provided, the component acts in a controlled manner.\n     */\n    value?: Date;\n\n    /**\n     * Allows the user to clear the selection by clicking the currently selected day.\n     * @default true\n     */\n    canClearSelection?: boolean;\n}\n\n// Handle date and time separately because changing the date shouldn't reset the time.\nexport interface IDateTimePickerState {\n    dateValue?: Date;\n    timeValue?: Date;\n}\n\nexport class DateTimePicker extends AbstractComponent<IDateTimePickerProps, IDateTimePickerState> {\n    public static defaultProps: IDateTimePickerProps = {\n        canClearSelection: true,\n        defaultValue: new Date(),\n    };\n\n    public static displayName = \"Blueprint.DateTimePicker\";\n\n    public constructor(props?: IDateTimePickerProps, context?: any) {\n        super(props, context);\n\n        const initialValue = this.props.value !== undefined ? this.props.value : this.props.defaultValue;\n        this.state = {\n            dateValue: initialValue,\n            timeValue: initialValue,\n        };\n    }\n\n    public render() {\n        const value = DateUtils.getDateTime(this.state.dateValue, this.state.timeValue);\n        return (\n            <div className={classNames(Classes.DATETIMEPICKER, this.props.className)}>\n                <DatePicker\n                    {...this.props.datePickerProps}\n                    canClearSelection={this.props.canClearSelection}\n                    onChange={this.handleDateChange}\n                    value={value}\n                />\n                <TimePicker {...this.props.timePickerProps} onChange={this.handleTimeChange} value={value} />\n            </div>\n        );\n    }\n\n    public componentWillReceiveProps(nextProps: IDatePickerProps) {\n        if (this.props.value === nextProps.value) {\n            return;\n        } else if (nextProps.value != null) {\n            this.setState({\n                dateValue: nextProps.value,\n                timeValue: nextProps.value,\n            });\n        } else {\n            // clear only the date to remove the selected-date style in the calendar\n            this.setState({ dateValue: null });\n        }\n    }\n\n    public handleDateChange = (dateValue: Date, isUserChange: boolean) => {\n        if (this.props.value === undefined) {\n            this.setState({ dateValue });\n        }\n        const value = DateUtils.getDateTime(dateValue, this.state.timeValue);\n        Utils.safeInvoke(this.props.onChange, value, isUserChange);\n    };\n\n    public handleTimeChange = (timeValue: Date) => {\n        if (this.props.value === undefined) {\n            this.setState({ timeValue });\n        }\n        const value = DateUtils.getDateTime(this.state.dateValue, timeValue);\n        Utils.safeInvoke(this.props.onChange, value, true);\n    };\n}\n"]}