{"version":3,"sources":["../src/datePickerCaption.tsx"],"names":[],"mappings":"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","file":"datePickerCaption.js","sourcesContent":["/*\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport { Utils as BlueprintUtils } from \"@blueprintjs/core\";\nimport * as classNames from \"classnames\";\nimport * as React from \"react\";\nimport * as ReactDayPicker from \"react-day-picker\";\n\nimport * as Classes from \"./common/classes\";\nimport * as Utils from \"./common/utils\";\n\nexport interface IDatePickerCaptionProps extends ReactDayPicker.CaptionElementProps {\n    maxDate: Date;\n    minDate: Date;\n    onMonthChange?: (month: number) => void;\n    onYearChange?: (year: number) => void;\n}\n\nexport class DatePickerCaption extends React.Component<IDatePickerCaptionProps, {}> {\n    private displayedMonthText: string;\n    private displayedYearText: string;\n\n    private containerElement: HTMLElement;\n    private monthArrowElement: HTMLElement;\n    private yearArrowElement: HTMLElement;\n\n    public render() {\n        const { date, locale, localeUtils, minDate, maxDate } = this.props;\n        const minYear = minDate.getFullYear();\n        const maxYear = maxDate.getFullYear();\n        const displayMonth = date.getMonth();\n        const displayYear = date.getFullYear();\n\n        // build the list of available months, limiting based on minDate and maxDate as necessary\n        const months = localeUtils.getMonths(locale);\n        const startMonth = displayYear === minYear ? minDate.getMonth() : 0;\n        const endMonth = displayYear === maxYear ? maxDate.getMonth() + 1 : undefined;\n        const monthOptionElements = months\n            .map((name, i) => {\n                return (\n                    <option key={i} value={i.toString()}>\n                        {name}\n                    </option>\n                );\n            })\n            .slice(startMonth, endMonth);\n\n        const years = [minYear];\n        for (let year = minYear + 1; year <= maxYear; ++year) {\n            years.push(year);\n        }\n        const yearOptionElements = years.map((year, i) => {\n            return (\n                <option key={i} value={year.toString()}>\n                    {year}\n                </option>\n            );\n        });\n        // allow out-of-bounds years but disable the option. this handles the Dec 2016 case in #391.\n        if (displayYear > maxYear) {\n            yearOptionElements.push(\n                <option key=\"next\" disabled={true} value={displayYear.toString()}>\n                    {displayYear}\n                </option>,\n            );\n        }\n\n        this.displayedMonthText = months[displayMonth];\n        this.displayedYearText = displayYear.toString();\n\n        const caretClasses = classNames(\"pt-icon-standard\", \"pt-icon-caret-down\", Classes.DATEPICKER_CAPTION_CARET);\n        return (\n            <div className={Classes.DATEPICKER_CAPTION} ref={this.containerRefHandler}>\n                <div className={Classes.DATEPICKER_CAPTION_SELECT}>\n                    <select\n                        className={Classes.DATEPICKER_MONTH_SELECT}\n                        onChange={this.handleMonthSelectChange}\n                        value={displayMonth.toString()}\n                    >\n                        {monthOptionElements}\n                    </select>\n                    <span className={caretClasses} ref={this.monthArrowRefHandler} />\n                </div>\n                <div className={Classes.DATEPICKER_CAPTION_SELECT}>\n                    <select\n                        className={Classes.DATEPICKER_YEAR_SELECT}\n                        onChange={this.handleYearSelectChange}\n                        value={displayYear.toString()}\n                    >\n                        {yearOptionElements}\n                    </select>\n                    <span className={caretClasses} ref={this.yearArrowRefHandler} />\n                </div>\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        this.positionArrows();\n    }\n\n    public componentDidUpdate() {\n        this.positionArrows();\n    }\n\n    private containerRefHandler = (r: HTMLElement) => (this.containerElement = r);\n    private monthArrowRefHandler = (r: HTMLElement) => (this.monthArrowElement = r);\n    private yearArrowRefHandler = (r: HTMLElement) => (this.yearArrowElement = r);\n\n    private positionArrows() {\n        // pass our container element to the measureTextWidth utility to ensure\n        // that we're measuring the width of text as sized within this component.\n        const textClass = \"pt-datepicker-caption-measure\";\n        const monthWidth = Utils.measureTextWidth(this.displayedMonthText, textClass, this.containerElement);\n        this.monthArrowElement.setAttribute(\"style\", `left:${monthWidth}`);\n\n        const yearWidth = Utils.measureTextWidth(this.displayedYearText, textClass, this.containerElement);\n        this.yearArrowElement.setAttribute(\"style\", `left:${yearWidth}`);\n    }\n\n    private handleMonthSelectChange = (e: React.FormEvent<HTMLSelectElement>) => {\n        const month = parseInt((e.target as HTMLSelectElement).value, 10);\n        BlueprintUtils.safeInvoke(this.props.onMonthChange, month);\n    };\n\n    private handleYearSelectChange = (e: React.FormEvent<HTMLSelectElement>) => {\n        const year = parseInt((e.target as HTMLSelectElement).value, 10);\n        BlueprintUtils.safeInvoke(this.props.onYearChange, year);\n    };\n}\n"]}