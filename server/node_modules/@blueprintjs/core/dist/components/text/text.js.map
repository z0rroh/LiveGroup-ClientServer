{"version":3,"sources":["../src/components/text/text.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,uCAAyC;AACzC,kDAAoD;AACpD,6BAA+B;AAE/B,8CAAgD;AAkBhD,IAAa,IAAI;IAAS,gCAAuC;IADjE;QAAA,qEA0CC;QAxCU,WAAK,GAAe;YACvB,oBAAoB,EAAE,KAAK;YAC3B,WAAW,EAAE,EAAE;SAClB,CAAC;QAGM,iBAAW,GAAG;YAClB,IAAI,EAAE,UAAC,eAA+B,IAAK,OAAA,KAAI,CAAC,OAAO,GAAG,eAAe,EAA9B,CAA8B;SAC5E,CAAC;;IAgCN,CAAC;IA9BU,gCAAiB,GAAxB;QACI,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEM,iCAAkB,GAAzB;QACI,IAAI,CAAC,MAAM,EAAE,CAAC;IAClB,CAAC;IAEM,qBAAM,GAAb;QACI,IAAM,OAAO,GAAG,UAAU;YACtB,GAAC,OAAO,CAAC,sBAAsB,IAAG,IAAI,CAAC,KAAK,CAAC,SAAS;iBACvD,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;QACzB,MAAM,CAAC,CACH,6BACI,SAAS,EAAE,OAAO,EAClB,GAAG,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,EAC1B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,GAAG,SAAS,IAE1E,IAAI,CAAC,KAAK,CAAC,QAAQ,CAClB,CACT,CAAC;;IACN,CAAC;IAEO,qBAAM,GAAd;QACI,IAAM,QAAQ,GAAG;YACb,oBAAoB,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW;YACjG,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;SACxC,CAAC;QACF,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC5B,CAAC;IACL,WAAC;AAAD,CAzCA,AAyCC,CAzCyB,KAAK,CAAC,SAAS,GAyCxC;AAzCY,IAAI;IADhB,UAAU;GACE,IAAI,CAyChB;AAzCY,oBAAI","file":"components/text/text.js","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport * as Classes from \"../../common/classes\";\nimport { IProps } from \"../../common/props\";\n\nexport interface ITextProps extends IProps {\n    /**\n     * Indicates that this component should be truncated with an ellipsis if it overflows its container.\n     * The `title` attribute will also be added when content overflows to show the full text of the children on hover.\n     * @default false\n     */\n    ellipsize?: boolean;\n}\n\nexport interface ITextState {\n    textContent: string;\n    isContentOverflowing: boolean;\n}\n\n@PureRender\nexport class Text extends React.Component<ITextProps, ITextState> {\n    public state: ITextState = {\n        isContentOverflowing: false,\n        textContent: \"\",\n    };\n\n    private textRef: HTMLDivElement;\n    private refHandlers = {\n        text: (overflowElement: HTMLDivElement) => this.textRef = overflowElement,\n    };\n\n    public componentDidMount() {\n        this.update();\n    }\n\n    public componentDidUpdate() {\n        this.update();\n    }\n\n    public render() {\n        const classes = classNames({\n            [Classes.TEXT_OVERFLOW_ELLIPSIS]: this.props.ellipsize,\n        }, this.props.className);\n        return (\n            <div\n                className={classes}\n                ref={this.refHandlers.text}\n                title={this.state.isContentOverflowing ? this.state.textContent : undefined}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n\n    private update() {\n        const newState = {\n            isContentOverflowing: this.props.ellipsize && this.textRef.scrollWidth > this.textRef.clientWidth,\n            textContent: this.textRef.textContent,\n        };\n        this.setState(newState);\n    }\n}\n"]}