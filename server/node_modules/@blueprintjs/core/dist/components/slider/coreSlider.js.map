{"version":3,"sources":["../src/components/slider/coreSlider.tsx"],"names":[],"mappings":"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","file":"components/slider/coreSlider.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as classNames from \"classnames\";\nimport * as PureRender from \"pure-render-decorator\";\nimport * as React from \"react\";\n\nimport { AbstractComponent } from \"../../common/abstractComponent\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { IProps } from \"../../common/props\";\nimport { approxEqual, countDecimalPlaces, isFunction } from \"../../common/utils\";\n\nexport interface ICoreSliderProps extends IProps {\n    /**\n     * Whether the slider is non-interactive.\n     * @default false\n     */\n    disabled?: boolean;\n\n    /**\n     * Increment between successive labels. Must be greater than zero.\n     * @default 1\n     */\n    labelStepSize?: number;\n\n    /**\n     * Number of decimal places to use when rendering label value. Default value is the number of\n     * decimals used in the `stepSize` prop. This prop has _no effect_ if you supply a custom\n     * `renderLabel` callback.\n     * @default inferred from stepSize\n     */\n    labelPrecision?: number;\n\n    /**\n     * Maximum value of the slider.\n     * @default 10\n     */\n    max?: number;\n\n    /**\n     * Minimum value of the slider.\n     * @default 0\n     */\n    min?: number;\n\n    /**\n     * Whether a solid bar should be rendered on the track between current and initial values,\n     * or between handles for `RangeSlider`.\n     * @default true\n     */\n    showTrackFill?: boolean;\n\n    /**\n     * Increment between successive values; amount by which the handle moves. Must be greater than zero.\n     * @default 1\n     */\n    stepSize?: number;\n\n    /**\n     * Callback to render a single label. Useful for formatting numbers as currency or percentages.\n     * If `true`, labels will use number value formatted to `labelPrecision` decimal places.\n     * If `false`, labels will not be shown.\n     * @default true\n     */\n    renderLabel?: boolean | ((value: number) => string | JSX.Element);\n}\n\nexport interface ISliderState {\n    labelPrecision?: number;\n    /** the client size, in pixels, of one tick */\n    tickSize?: number;\n}\n\n@PureRender\nexport abstract class CoreSlider<P extends ICoreSliderProps> extends AbstractComponent<P, ISliderState> {\n    public className = Classes.SLIDER;\n\n    private trackElement: HTMLElement;\n    private refHandlers = {\n        track: (el: HTMLDivElement) => this.trackElement = el,\n    };\n\n    public constructor(props: P) {\n        super(props);\n        this.state = {\n            labelPrecision: this.getLabelPrecision(props),\n            tickSize: 0,\n        };\n    }\n\n    public render() {\n        const { disabled } = this.props;\n        const classes = classNames(this.className, {\n            [Classes.DISABLED]: disabled,\n            [`${Classes.SLIDER}-unlabeled`]: this.props.renderLabel === false,\n        }, this.props.className);\n        return (\n            <div\n                className={classes}\n                onMouseDown={this.maybeHandleTrackClick}\n                onTouchStart={this.maybeHandleTrackTouch}\n            >\n                <div className={`${Classes.SLIDER}-track`} ref={this.refHandlers.track} />\n                {this.maybeRenderFill()}\n                {this.maybeRenderAxis()}\n                {this.renderHandles()}\n            </div>\n        );\n    }\n\n    public componentDidMount() {\n        this.updateTickSize();\n    }\n\n    public componentDidUpdate() {\n        this.updateTickSize();\n    }\n\n    public componentWillReceiveProps(props: P) {\n        super.componentWillReceiveProps(props);\n        this.setState({ labelPrecision: this.getLabelPrecision(props) });\n    }\n\n    protected abstract renderHandles(): JSX.Element | JSX.Element[];\n    protected abstract renderFill(): JSX.Element;\n    /** An event listener invoked when the user clicks on the track outside a handle */\n    protected abstract handleTrackClick(event: React.MouseEvent<HTMLElement>): void;\n    protected abstract handleTrackTouch(event: React.TouchEvent<HTMLElement>): void;\n\n    protected formatLabel(value: number): React.ReactChild {\n        const { renderLabel } = this.props;\n        if (renderLabel === false) {\n            return undefined;\n        } else if (isFunction(renderLabel)) {\n            return renderLabel(value);\n        } else {\n            return value.toFixed(this.state.labelPrecision);\n        }\n    }\n\n    protected validateProps(props: P) {\n        if (props.stepSize <= 0) {\n            throw new Error(Errors.SLIDER_ZERO_STEP);\n        }\n        if (props.labelStepSize <= 0) {\n            throw new Error(Errors.SLIDER_ZERO_LABEL_STEP);\n        }\n    }\n\n    private maybeRenderAxis() {\n        const { max, min, labelStepSize } = this.props;\n        if (this.props.renderLabel === false) { return undefined; }\n\n        const stepSize = Math.round(this.state.tickSize * labelStepSize);\n        const labels: JSX.Element[] = [];\n        // tslint:disable-next-line:one-variable-per-declaration\n        for (let i = min, left = 0; i < max || approxEqual(i, max); i += labelStepSize, left += stepSize) {\n            labels.push(<div className={`${Classes.SLIDER}-label`} key={i} style={{left}}>{this.formatLabel(i)}</div>);\n        }\n        return <div className={`${Classes.SLIDER}-axis`}>{labels}</div>;\n    }\n\n    private maybeRenderFill() {\n        if (this.props.showTrackFill && this.trackElement != null) {\n            return this.renderFill();\n        }\n        return undefined;\n    }\n\n    private maybeHandleTrackClick = (event: React.MouseEvent<HTMLDivElement>) => {\n        if (this.canHandleTrackEvent(event)) {\n            this.handleTrackClick(event);\n        }\n    }\n\n    private maybeHandleTrackTouch = (event: React.TouchEvent<HTMLDivElement>) => {\n        if (this.canHandleTrackEvent(event)) {\n            this.handleTrackTouch(event);\n        }\n    }\n\n    private canHandleTrackEvent = (event: React.MouseEvent<HTMLDivElement> | React.TouchEvent<HTMLDivElement>) => {\n        const target = event.target as HTMLElement;\n        // ensure event does not come from inside the handle\n        return !this.props.disabled && target.closest(`.${Classes.SLIDER_HANDLE}`) == null;\n    }\n\n    private getLabelPrecision({ labelPrecision, stepSize }: P) {\n        // infer default label precision from stepSize because that's how much the handle moves.\n        return (labelPrecision == null)\n            ? countDecimalPlaces(stepSize)\n            : labelPrecision;\n    }\n\n    private updateTickSize() {\n        if (this.trackElement != null) {\n            const tickSize = this.trackElement.clientWidth / (this.props.max - this.props.min);\n            this.setState({ tickSize });\n        }\n    }\n}\n"]}