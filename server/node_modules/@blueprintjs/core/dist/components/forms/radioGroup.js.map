{"version":3,"sources":["../src/components/forms/radioGroup.tsx"],"names":[],"mappings":"AAAA;;;;;GAKG;;;;AAEH,6BAA+B;AAE/B,oEAAmE;AACnE,8CAAgD;AAChD,4CAA8C;AAE9C,uCAAmC;AAoCnC,IAAI,OAAO,GAAG,CAAC,CAAC;AAChB,sBAAsB,MAAM,CAAI,UAAU,CAAC,WAAW,SAAI,OAAO,EAAI,CAAC,CAAC,CAAC;AAExE;IAAgC,sCAAuC;IAAvE;QAAA,qEAgDC;QA7CG,wEAAwE;QAChE,mBAAa,GAAG,QAAQ,EAAE,CAAC;;IA4CvC,CAAC;IA1CU,2BAAM,GAAb;QACY,IAAA,wBAAK,CAAgB;QAC7B,MAAM,CAAC,CACH,6BAAK,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;YAC/B,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,+BAAO,SAAS,EAAE,OAAO,CAAC,KAAK,IAAG,KAAK,CAAS;YACvE,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,GAAG,IAAI,CAAC,cAAc,EAAE,CAC/E,CACT,CAAC;IACN,CAAC;IAES,kCAAa,GAAvB;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAC5D,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,sCAAsC,CAAC,CAAC;QAChE,CAAC;IACL,CAAC;IAEO,mCAAc,GAAtB;QAAA,iBAQC;QAPG,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,UAAC,KAAK;YACjD,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACjB,MAAM,CAAC,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACtE,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,KAAK,CAAC;YACjB,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,kCAAa,GAArB;QAAA,iBAIC;QAHG,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,UAAC,MAAM,IAAK,OAAA,CACtC,oBAAC,gBAAK,uBAAK,MAAM,EAAM,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAE,GAAG,EAAE,MAAM,CAAC,KAAK,IAAI,CAC3E,EAFyC,CAEzC,CAAC,CAAC;IACP,CAAC;IAEO,kCAAa,GAArB,UAAsB,WAAyB;QACnC,IAAA,sBAAI,CAAgB;QACpB,IAAA,yBAAK,EAAE,+BAAQ,CAAiB;QACxC,MAAM,CAAC;YACH,OAAO,EAAE,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC,aAAa;YAC3C,QAAQ,EAAE,QAAQ,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ;YACzC,IAAI,EAAE,IAAI,IAAI,IAAI,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI;YAC9C,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ;SAChC,CAAC;IACN,CAAC;IACL,iBAAC;AAAD,CAhDA,AAgDC,CAhD+B,qCAAiB;AAC/B,sBAAW,GAAG,sBAAsB,CAAC;AAD1C,gCAAU;AAgDtB,CAAC;AAEF,iBAAiB,KAAU;IACvB,MAAM,CAAC,KAAK,IAAI,IAAI,IAAK,KAAqB,CAAC,IAAI,KAAK,gBAAK,CAAC;AAClE,CAAC","file":"components/forms/radioGroup.js","sourcesContent":["/*\n * Copyright 2016 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the BSD-3 License as modified (the “License”); you may obtain a copy\n * of the license at https://github.com/palantir/blueprint/blob/master/LICENSE\n * and https://github.com/palantir/blueprint/blob/master/PATENTS\n */\n\nimport * as React from \"react\";\n\nimport { AbstractComponent } from \"../../common/abstractComponent\";\nimport * as Classes from \"../../common/classes\";\nimport * as Errors from \"../../common/errors\";\nimport { IOptionProps, IProps } from \"../../common/props\";\nimport { Radio } from \"./controls\";\n\nexport interface IRadioGroupProps extends IProps {\n    /**\n     * Whether the group and _all_ its radios are disabled.\n     * Individual radios can be disabled using their `disabled` prop.\n     */\n    disabled?: boolean;\n\n    /** Optional label text to display above the radio buttons. */\n    label?: string;\n\n    /**\n     * Name of the group, used to link radio buttons together in HTML.\n     * If omitted, a unique name will be generated internally.\n     */\n    name?: string;\n\n    /**\n     * Callback invoked when the currently selected radio changes.\n     * Use `event.currentTarget.value` to read the currently selected value.\n     * This prop is required because this component only supports controlled usage.\n     */\n    onChange: (event: React.FormEvent<HTMLInputElement>) => void;\n\n    /**\n     * Array of options to render in the group.\n     * This prop is mutually exclusive with `children`: either provide an array of `IOptionProps`\n     * objects or provide `<Radio>` children elements.\n     */\n    options?: IOptionProps[];\n\n    /** Value of the selected radio. The child with this value will be `:checked`. */\n    selectedValue?: string;\n}\n\nlet counter = 0;\nfunction nextName() { return `${RadioGroup.displayName}-${counter++}`; }\n\nexport class RadioGroup extends AbstractComponent<IRadioGroupProps, {}> {\n    public static displayName = \"Blueprint.RadioGroup\";\n\n    // a unique name for this group, which can be overridden by `name` prop.\n    private autoGroupName = nextName();\n\n    public render() {\n        const { label } = this.props;\n        return (\n            <div className={this.props.className}>\n                {label == null ? null : <label className={Classes.LABEL}>{label}</label>}\n                {Array.isArray(this.props.options) ? this.renderOptions() : this.renderChildren()}\n            </div>\n        );\n    }\n\n    protected validateProps() {\n        if (this.props.children != null && this.props.options != null) {\n            console.warn(Errors.RADIOGROUP_WARN_CHILDREN_OPTIONS_MUTEX);\n        }\n    }\n\n    private renderChildren() {\n        return React.Children.map(this.props.children, (child) => {\n            if (isRadio(child)) {\n                return React.cloneElement(child, this.getRadioProps(child.props));\n            } else {\n                return child;\n            }\n        });\n    }\n\n    private renderOptions() {\n        return this.props.options.map((option) => (\n            <Radio {...option} {...this.getRadioProps(option)} key={option.value} />\n        ));\n    }\n\n    private getRadioProps(optionProps: IOptionProps) {\n        const { name } = this.props;\n        const { value, disabled } = optionProps;\n        return {\n            checked: value === this.props.selectedValue,\n            disabled: disabled || this.props.disabled,\n            name: name == null ? this.autoGroupName : name,\n            onChange: this.props.onChange,\n        };\n    }\n};\n\nfunction isRadio(child: any): child is JSX.Element {\n    return child != null && (child as JSX.Element).type === Radio;\n}\n"]}